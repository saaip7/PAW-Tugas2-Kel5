/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/qZ2Xyp2Nurv
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

require("dotenv").config()

// Interface yang disesuaikan dengan schema MongoDB
interface Room {
  roomType: string;         // Tipe kamar (single, double, suite)
  nomorKamar: string;       // Nomor kamar
  pricePerNight: number;    // Harga per malam
  availability: boolean;    // Status ketersediaan
  numberOfBeds: number;     // Jumlah tempat tidur
  description: string;     // Deskripsi kamar (opsional)
  maxOccupancy: number;     // Maksimal penghuni kamar
}

export function RoomsPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [rooms, setRooms] = useState<Room[]>([]); // Tipe array Room
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch data dari API saat komponen mount
  useEffect(() => {
    async function fetchRooms() {
      try {
        const response = await fetch(`http://localhost:5000/kamar`);
        if (!response.ok) throw new Error('Failed to fetch rooms');
        
        const result = await response.json();  // Mengambil respons dari API
        const data: Room[] = result.data;      // Akses array `data` di dalam respons
        setRooms(data);                        // Set rooms ke data yang benar
        setLoading(false);
      } catch (err) {
        const errorMessage = (err as Error).message;
        setError(errorMessage);
        setLoading(false);
      }
    }
  
    fetchRooms();
  }, []);
  
  

  const filteredRooms = useMemo(() => {
    return rooms.filter((room) =>
      room.roomType.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [rooms, searchTerm]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="container mx-auto py-8">
      <div className="mb-6">
        <Input
          placeholder="Search rooms..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredRooms.map((room) => (
          <Card key={room.nomorKamar}>
            <CardContent>
              <h3 className="text-xl font-bold mb-2">{room.roomType} - Room {room.nomorKamar}</h3>
              <p className="text-muted-foreground mb-2">Number of Beds: {room.numberOfBeds}</p>
              <p className="text-muted-foreground mb-2">Max Occupancy: {room.maxOccupancy}</p>
              <p className="text-muted-foreground mb-2">
                {room.availability ? "Available" : "Not Available"}
              </p>
              {room.description && <p className="text-muted-foreground mb-4">{room.description}</p>}
              <div className="flex justify-between items-center">
                <span className="font-bold text-lg">${room.pricePerNight}/night</span>
                <Button variant="outline">Book Now</Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

